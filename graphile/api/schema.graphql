"""The root query type which gives access points into the data universe."""
type Query {
  class(id: UUID!): Class
  user(id: UUID!): User
  userLoginSalt(userEmail: String!): String
  viewer: User
}

type Class {
  id: UUID!
  name: String!
  teacherId: UUID!

  """Reads a single `User` that is related to this `Class`."""
  teacher: User
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type User {
  id: UUID!
  email: String!
  userType: UserType!
  salt: String!
}

enum UserType {
  STUDENT
  TEACHER
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Class`."""
  createClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateClassInput!
  ): CreateClassPayload

  """Updates a single `Class` using a unique key and a patch."""
  updateClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateClassInput!
  ): UpdateClassPayload

  """Deletes a single `Class` using a unique key."""
  deleteClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteClassInput!
  ): DeleteClassPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
  signUp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SignUpInput!
  ): SignUpPayload

  """Use this mutation to initiate the SRP login flow"""
  initiateSrpLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitiateSrpLoginInput!
  ): InitiateSrpLoginPayload

  """
  Use this mutation to complete the SRP login flow.
  If the server proof returned is null, the client
  proof is invalid.
  """
  completeSrpLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CompleteSrpLoginInput!
  ): CompleteSrpLoginResponse
}

"""The output of our create `Class` mutation."""
type CreateClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Class` that was created by this mutation."""
  class: Class

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Class`."""
  teacher: User
}

"""All input for the create `Class` mutation."""
input CreateClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Class` to be created by this mutation."""
  class: ClassInput!
}

"""An input for mutations affecting `Class`"""
input ClassInput {
  name: String!
  teacherId: UUID!
}

"""The output of our update `Class` mutation."""
type UpdateClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Class` that was updated by this mutation."""
  class: Class

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Class`."""
  teacher: User
}

"""All input for the `updateClass` mutation."""
input UpdateClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Class` being updated.
  """
  patch: ClassPatch!
  id: UUID!
}

"""
Represents an update to a `Class`. Fields that are set will be updated.
"""
input ClassPatch {
  name: String
  teacherId: UUID
}

"""The output of our delete `Class` mutation."""
type DeleteClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Class` that was deleted by this mutation."""
  class: Class
  deletedClassNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Class`."""
  teacher: User
}

"""All input for the `deleteClass` mutation."""
input DeleteClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our `signUp` mutation."""
type SignUpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  signUpResult: SignUpResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

enum SignUpResult {
  USER_WITH_EMAIL_EXISTS
  SUCCESS
}

"""All input for the `signUp` mutation."""
input SignUpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  userType: UserType!
  verifier: String!
  salt: String!
}

type InitiateSrpLoginPayload {
  loginFlowId: String
  serverPublicKey: String
}

input InitiateSrpLoginInput {
  email: String!
  clientPublicKey: String!
}

type CompleteSrpLoginResponse {
  serverProof: String
}

input CompleteSrpLoginInput {
  loginFlowId: String!
  clientProof: String!
}
